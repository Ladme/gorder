# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import numpy
import numpy.typing
import typing
import gorder

class AnalysisResults:
    r"""
    Container for all results of an analysis.
    
    Provides access to overall results, per-molecule results, average order
    parameters, average order maps, and optionally collected leaflet classification data.
    """
    def write(self) -> None:
        r"""
        Write the results into output files.
        
        Raises
        ------
        WriteError
            If writing fails due to file system or internal errors.
        """
    def n_analyzed_frames(self) -> builtins.int:
        r"""
        Get the total number of analyzed frames.
        
        Returns
        -------
        int
            Number of frames processed in the analysis.
        """
    def molecules(self) -> builtins.list[MoleculeResults]:
        r"""
        Get results for all individual molecule types.
        
        Returns
        -------
        List[MoleculeResults]
            A list of results for each molecule type.
        """
    def get_molecule(self, name:builtins.str) -> MoleculeResults:
        r"""
        Get results for a molecule type with the specified name.
        
        Parameters
        ----------
        name : str
            Name of the molecule type.
        
        Returns
        -------
        MoleculeResults
            Results for the specified molecule type.
        
        Raises
        ------
        APIError
            If no molecule type with the given name exists.
        """
    def average_order(self) -> OrderCollection:
        r"""
        Get average order parameters across all bond types of all molecules.
        
        Returns
        -------
        OrderCollection
            Collection of average order parameters.
        """
    def average_ordermaps(self) -> OrderMapsCollection:
        r"""
        Get average order parameter maps across all bond types of all molecules.
        
        Returns
        -------
        OrderMapsCollection
            Collection of average order maps.
        """
    def leaflets_data(self) -> typing.Optional[LeafletsData]:
        r"""
        Get collected leaflet classification data.
        
        Returns
        -------
        LeafletsData
            Leaflet classification data if stored; otherwise `None`.
        
        Notes
        -----
        Leaflet classification data are not stored by default. To store them,
        you must explicitly request collection during analysis.
        """
    def normals_data(self) -> typing.Optional[NormalsData]:
        r"""
        Get collected membrane normals.
        
        Returns
        -------
        NormalsData
            Membrane normals data if stored; otherwise `None`.
        
        Notes
        -----
        Membrane normals are not stored by default. To store them,
        you must explicitly request collection during analysis.
        Collecting membrane normals is only supported when they are dynamically calculated.
        """

class AtomResults:
    r"""
    Results of the analysis for a single atom type.
    
    Provides access to per-atom type order parameters, order maps, and the bond results
    associated with this atom type.
    """
    def atom(self) -> gorder.AtomType:
        r"""
        Get the type of the atom for which these results were calculated.
        
        Returns
        -------
        AtomType
            The atom type for which these results were calculated.
        """
    def molecule(self) -> builtins.str:
        r"""
        Get the name of the molecule type for this atom type.
        
        Returns
        -------
        str
            Name of the molecule containing this atom type.
        """
    def bonds(self) -> builtins.list[BondResults]:
        r"""
        Get the results for each bond type of this atom type.
        
        Returns
        -------
        List[BondResults]
            Results for all bond types involving this atom type.
        """
    def get_bond(self, relative_index:builtins.int) -> BondResults:
        r"""
        Get the results for a bond types between this atom type and a hydrogen type (AA) or virtual hydrogen type (UA).
        
        Parameters
        ----------
        relative_index : int
            Relative index (zero-based) of the bonded hydrogen atom type.
        
        Returns
        -------
        BondResults
            Results for the specified bond type.
        
        Raises
        ------
        APIError
            If the specified (virtual) hydrogen type does not exist.
        """
    def order(self) -> OrderCollection:
        r"""
        Get order parameters calculated for this atom type.
        
        Returns
        -------
        OrderCollection
            Collection of order parameters for this atom type.
        """
    def ordermaps(self) -> OrderMapsCollection:
        r"""
        Get order maps calculated for this atom type.
        
        Returns
        -------
        OrderMapsCollection
            Collection of order maps for this atom type.
        """

class BondResults:
    r"""
    Results of the analysis for a single bond type.
    
    Provides access to the molecule name, the atom types involved (if available),
    and the order parameters and order maps for this bond type.
    """
    def molecule(self) -> builtins.str:
        r"""
        Get the name of the molecule type for this bond type.
        
        Returns
        -------
        str
            Name of the molecule containing this bond type.
        """
    def atoms(self) -> builtins.tuple[gorder.AtomType, gorder.AtomType]:
        r"""
        Get the atom types involved in this bond type.
        
        Returns
        -------
        Tuple[AtomType, AtomType]
            The two atom types forming this bond type.
        
        Raises
        ------
        APIError
            If the bond type is a virtual united-atom bond type (UA), where only one real atom type exists.
        """
    def order(self) -> OrderCollection:
        r"""
        Get order parameters calculated for this bond type.
        
        Returns
        -------
        OrderCollection
            Collection of order parameters for this bond type.
        """
    def ordermaps(self) -> OrderMapsCollection:
        r"""
        Get order maps calculated for this bond type.
        
        Returns
        -------
        OrderMapsCollection
            Collection of order maps for this bond type.
        """

class Convergence:
    r"""
    Stores information about the convergence of order parameter calculations
    for a single molecule.
    
    Provides cumulative averages over time for the full membrane and for
    individual leaflets.
    """
    def frames(self) -> builtins.list[builtins.int]:
        r"""
        Get the indices of trajectory frames for which order parameters were calculated.
        
        The first analyzed frame is assigned an index of 1. For example,
        if the analysis starts at 200 ns, the frame at or just after 200 ns
        is indexed as 1.
        
        Returns
        -------
        List[int]
            Indices of the analyzed frames.
        """
    def total(self) -> typing.Optional[builtins.list[builtins.float]]:
        r"""
        Get cumulative average order parameters for the entire membrane.
        
        Each element represents the cumulative average up to that frame.
        
        Returns
        -------
        List[float]
            Cumulative averages for the full membrane, or `None` if not available.
        """
    def upper(self) -> typing.Optional[builtins.list[builtins.float]]:
        r"""
        Get cumulative average order parameters for the upper leaflet.
        
        Returns
        -------
        List[float]
            Cumulative averages for the upper leaflet, or `None` if not available.
        """
    def lower(self) -> typing.Optional[builtins.list[builtins.float]]:
        r"""
        Get cumulative average order parameters for the lower leaflet.
        
        Returns
        -------
        List[float]
            Cumulative averages for the lower leaflet, or `None` if not available.
        """

class LeafletsData:
    r"""
    Stores collected leaflet classification data.
    """
    def get_molecule(self, molecule:builtins.str) -> typing.Optional[numpy.typing.NDArray[numpy.uint8]]:
        r"""
        Get leaflet classification data for the specified molecule type.
        
        Parameters
        ----------
        molecule : str
            Name of the molecule type to query.
        
        Returns
        -------
        numpy.ndarray of shape (n_frames, n_molecules), dtype=uint8
            A 2D array where rows correspond to analyzed trajectory frames and columns to
            individual molecules. Values are `1` for molecules in the upper leaflet
            and `0` for molecules in the lower leaflet. Returns `None` if no leaflet
            classification data exists for the specified molecule type.
        
        Notes
        -----
        This is a potentially expensive operation, as it involves copying and
        converting from the internal Rust representation into a NumPy array.
        """
    def frames(self) -> builtins.list[builtins.int]:
        r"""
        Get the indices of trajectory frames for which leaflet classification was performed.
        
        The first analyzed frame is assigned an index of 1. For example,
        if the analysis starts at 200 ns, the frame at or just after 200 ns
        is indexed as 1.
        
        Returns
        -------
        List[int]
            Indices of the frames for which leaflet classification was performed.
        """

class Map:
    r"""
    Map of order parameters.
    """
    def span_x(self) -> tuple[builtins.float, builtins.float]:
        r"""
        Get the span of the map along the first dimension of the map.
        
        Returns
        -------
        Tuple[float, float]
            Minimum and maximum coordinates along the first dimension of the map.
        """
    def span_y(self) -> tuple[builtins.float, builtins.float]:
        r"""
        Get the span of the map along the second dimension of the map.
        
        Returns
        -------
        Tuple[float, float]
            Minimum and maximum coordinates along the second dimension of the map.
        """
    def tile_dim(self) -> tuple[builtins.float, builtins.float]:
        r"""
        Get the dimensions of a single grid tile in the map.
        
        Returns
        -------
        Tuple[float, float]
            Width and height of a single tile of the map.
        """
    def get_at(self, x:builtins.float, y:builtins.float) -> typing.Optional[builtins.float]:
        r"""
        Get the order parameter at the specified coordinates.
        
        Parameters
        ----------
        x : float
            Coordinate along the first dimension of the map.
        y : float
            Coordinate along the second dimension of the map.
        
        Returns
        -------
        float
            Order parameter at the given coordinates, or `None` if out of bounds.
        """
    def extract(self) -> tuple[numpy.typing.NDArray[numpy.float32], numpy.typing.NDArray[numpy.float32], numpy.typing.NDArray[numpy.float32]]:
        r"""
        Extract the order map into NumPy arrays.
        
        Returns
        -------
        Tuple[np.ndarray[float32], np.ndarray[float32], np.ndarray[float32]]
            A tuple of NumPy arrays:
            - The first array (1D) contains positions of the grid tiles along the first dimension of the map (typically `x`).
            - The second array (1D) contains positions of the grid tiles along the second dimension of the map (typically `y`).
            - The third array (2D) contains the calculated order parameters.
        """

class MoleculeResults:
    r"""
    Results of the analysis for a single molecule type.
    
    Provides access to average order parameters, average order maps, and per-atom or
    per-bond results, as well as convergence data when available.
    """
    def molecule(self) -> builtins.str:
        r"""
        Get the name of the molecule type.
        
        Returns
        -------
        str
            Name of the molecule type.
        """
    def average_order(self) -> OrderCollection:
        r"""
        Get average order parameters for this molecule type.
        
        Returns
        -------
        OrderCollection
            Collection of average order parameters across all bond types.
        """
    def average_ordermaps(self) -> OrderMapsCollection:
        r"""
        Get average order parameter maps for this molecule type.
        
        Returns
        -------
        OrderMapsCollection
            Collection of average order maps across all bond types.
        """
    def atoms(self) -> builtins.list[AtomResults]:
        r"""
        Get results for each heavy atom type of the molecule.
        
        Returns
        -------
        List[AtomResults]
            Per-atom type results.
        
        Raises
        ------
        APIError
            If results are obtained for a coarse-grained system (atom-level results unavailable).
        """
    def bonds(self) -> builtins.list[BondResults]:
        r"""
        Get results for each bond type of the molecule.
        
        Returns
        -------
        List[BondResults]
            Per-bond type results.
        """
    def get_atom(self, relative_index:builtins.int) -> AtomResults:
        r"""
        Get results for a heavy atom type with the specified relative index.
        
        Parameters
        ----------
        relative_index : int
            Relative index (zero-based) of the atom type within the molecule type.
        
        Returns
        -------
        AtomResults
            Results for the specified atom type.
        
        Raises
        ------
        APIError
            If the atom type does not exist or results are obtained for a coarse-grained system.
        """
    def get_bond(self, relative_index_1:builtins.int, relative_index_2:builtins.int) -> BondResults:
        r"""
        Get results for a bond type involving atom types with the specified relative indices.
        
        Parameters
        ----------
        relative_index_1 : int
        relative_index_2 : int
            Relative indices (zero-based) of the bonded atom types.
        
        Returns
        -------
        BondResults
            Results for the specified bond type.
        
        Raises
        ------
        APIError
            If the bond type does not exist or the results are obtained for a united-atom system.
        """
    def convergence(self) -> typing.Optional[Convergence]:
        r"""
        Get convergence data for the molecule.
        
        Returns
        -------
        Convergence
            Convergence data if available; otherwise `None`.
        """

class NormalsData:
    r"""
    Stores collected membrane normals.
    """
    def get_molecule(self, molecule:builtins.str) -> typing.Optional[numpy.typing.NDArray[numpy.float32]]:
        r"""
        Get collected membrane normals for the specified molecule type.
        
        Parameters
        ----------
        molecule : str
            Name of the molecule type to query.
        
        Returns
        -------
        numpy.ndarray of shape (n_frames, n_molecules, 3), dtype=float32
            A 2D array where rows correspond to analyzed trajectory frames and columns to
            individual molecules. Each entry is a 3D vector.
            If the membrane normal was not calculated for a given molecule in a frame,
            the corresponding vector is (NaN, NaN, NaN).
            Returns `None` if no membrane normals have been collected.
        
        Notes
        -----
        This is a potentially expensive operation, as it involves copying and
        converting from the internal Rust representation into a NumPy array.
        """
    def frames(self) -> builtins.list[builtins.int]:
        r"""
        Get the indices of trajectory frames which were analyzed.
        
        The first analyzed frame is assigned an index of 1. For example,
        if the analysis starts at 200 ns, the frame at or just after 200 ns
        is indexed as 1.
        
        Returns
        -------
        List[int]
            Indices of the analyzed frames.
        """

class Order:
    r"""
    Single order parameter value, optionally with its estimated error.
    """
    def value(self) -> builtins.float:
        r"""
        Get the value of the order parameter (mean from the analyzed frames).
        
        Returns
        -------
        float
            Mean value of the order parameter.
        """
    def error(self) -> typing.Optional[builtins.float]:
        r"""
        Get the estimated error for this order parameter.
        
        Returns
        -------
        float
            Estimated error of the order parameter, or `None` if not available.
        """

class OrderCollection:
    r"""
    Order parameters for a single object (atom type, bond type, molecule type, system)
    calculated for the full membrane, the upper leaflet, and the lower leaflet.
    """
    def total(self) -> typing.Optional[Order]:
        r"""
        Get the order parameter calculated from the whole membrane.
        
        Returns
        -------
        Order
            Order parameter for the whole membrane. Returns `None` if not available.
        """
    def upper(self) -> typing.Optional[Order]:
        r"""
        Get the order parameter calculated from the upper leaflet.
        
        Returns
        -------
        Order
            Order parameter for the upper leaflet. Returns `None` if not available.
        """
    def lower(self) -> typing.Optional[Order]:
        r"""
        Get the order parameter calculated from the lower leaflet.
        
        Returns
        -------
        Order
            Order parameter for the lower leaflet. Returns `None` if not available.
        """

class OrderMapsCollection:
    r"""
    Order maps for a single object (atom type, bond type, molecule type, system)
    calculated for the full membrane, the upper leaflet, and the lower leaflet.
    """
    def total(self) -> typing.Optional[Map]:
        r"""
        Get the order map calculated from the whole membrane.
        
        Returns
        -------
        Map
            Order map for the whole membrane, or `None` if not available.
        """
    def upper(self) -> typing.Optional[Map]:
        r"""
        Get the order map calculated from the upper leaflet.
        
        Returns
        -------
        Map
            Order map for the upper leaflet, or `None` if not available.
        """
    def lower(self) -> typing.Optional[Map]:
        r"""
        Get the order map calculated from the lower leaflet.
        
        Returns
        -------
        Map
            Order map for the lower leaflet, or `None` if not available.
        """

