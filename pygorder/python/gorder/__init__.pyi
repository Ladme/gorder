# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import gorder.estimate_error
import gorder.ordermap
import gorder.results
import typing
from . import analysis_types
from . import estimate_error
from . import geometry
from . import leaflets
from . import membrane_normal
from . import ordermap
from . import results

class Analysis:
    r"""
    Class describing all the parameters of the analysis.
    
    Parameters
    ----------
    structure : str
        Path to a TPR (recommended), PDB, GRO, or PQR file containing the structure and topology of the system.
    trajectory : Union[str, list[str]]
        Path to an XTC (recommended), TRR, or GRO trajectory file to be analyzed.
        You can provide multiple XTC or TRR trajectories and these will be seamlessly concatenated.
    analysis_type : Union[AAOrder, CGOrder, UAOrder]
        Type of analysis to perform (e.g., AAOrder or CGOrder).
    bonds : Optional[str], default=None
        Path to a file containing bonding information. If specified, this overrides bonds from the structure file.
    index : Optional[str], default=None
        Path to an NDX file specifying groups in the system.
    output_yaml : Optional[str], default=None
        Path to an output YAML file containing the full analysis results.
    output_tab : Optional[str], default=None
        Path to an output TABLE file with human-readable results.
    output_xvg : Optional[str], default=None
        Filename pattern for output XVG files storing results. Each molecule type gets a separate file.
    output_csv : Optional[str], default=None
        Path to an output CSV file containing analysis results.
    membrane_normal : Optional[Union[str, dict, DynamicNormal]], default=None
        Direction of the membrane normal.
        Allowed values are `x`, `y`, `z`, path to file, dictionary specifying manual membrane normals or an instance of `DynamicNormal`.
        Defaults to the z-axis if not specified.
    begin : Optional[float], default=None
        Starting time of the trajectory analysis in picoseconds (ps). Defaults to the beginning of the trajectory.
    end : Optional[float], default=None
        Ending time of the trajectory analysis in picoseconds (ps). Defaults to the end of the trajectory.
    step : Optional[int], default=None
        Step size for analysis. Every Nth frame will be analyzed. Defaults to 1.
    min_samples : Optional[int], default=None
        Minimum number of samples required for each heavy atom or bond type to compute its order parameter. Defaults to 1.
    n_threads : Optional[int], default=None
        Number of threads to use for analysis. Defaults to 1.
    leaflets : Optional[Union[GlobalClassification, LocalClassification, IndividualClassification, ManualClassification, NdxClassification]], default=None
        Defines how lipids are assigned to membrane leaflets. If provided, order parameters are calculated per leaflet.
    ordermap : Optional[OrderMap], default=None
        Specifies parameters for ordermap calculations. If not provided, ordermaps are not generated.
    estimate_error : Optional[EstimateError], default=None
        Enables error estimation for each bond if specified.
    geometry : Optional[Union[Cuboid, Cylinder, Sphere]], default=None
        Defines a specific region in the simulation box for order parameter calculations. Defaults to the entire system.
    handle_pbc : Optional[bool], default=True
        If False, ignores periodic boundary conditions (PBC). Defaults to True.
    silent : Optional[bool], default=False
        If True, suppresses standard output messages during analysis.
    overwrite : Optional[bool], default=False
        If True, overwrites existing output files and directories without backups.
    """
    def __new__(cls, structure:builtins.str, trajectory:typing.Any, analysis_type:typing.Any, bonds:typing.Optional[builtins.str]=None, index:typing.Optional[builtins.str]=None, output_yaml:typing.Optional[builtins.str]=None, output_tab:typing.Optional[builtins.str]=None, output_xvg:typing.Optional[builtins.str]=None, output_csv:typing.Optional[builtins.str]=None, membrane_normal:typing.Optional[typing.Any]=None, begin:typing.Optional[builtins.float]=None, end:typing.Optional[builtins.float]=None, step:typing.Optional[builtins.int]=None, min_samples:typing.Optional[builtins.int]=None, n_threads:typing.Optional[builtins.int]=None, leaflets:typing.Optional[typing.Any]=None, ordermap:typing.Optional[OrderMap]=None, estimate_error:typing.Optional[EstimateError]=None, geometry:typing.Optional[typing.Any]=None, handle_pbc:typing.Optional[builtins.bool]=None, silent:typing.Optional[builtins.bool]=None, overwrite:typing.Optional[builtins.bool]=None) -> Analysis: ...
    def run(self) -> AnalysisResults:
        r"""
        Run the analysis.
        
        Executes the configured analysis on the input data and returns the results.
        
        Returns
        -------
        AnalysisResults
            Results of the analysis.
        
        Raises
        ------
        AnalysisError
            If the analysis fails.
        """
    @staticmethod
    def from_file(file:builtins.str) -> Analysis:
        r"""
        Read analysis options from a YAML configuration file.
        
        Parameters
        ----------
        file : str
            Path to the YAML configuration file.
        
        Returns
        -------
        Analysis
            Analysis instance initialized from the file.
        
        Raises
        ------
        ConfigError
            If the file cannot be read or parsed.
        """

class AtomType:
    r"""
    Represents an atom type within a molecule type.
    
    Provides access to the atom's name, its relative position within the molecule type,
    and the residue it belongs to.
    """
    ...

class Frequency:
    r"""
    Represents how often an action is performed.
    
    Can specify that an action occurs once or at a regular interval (every N frames).
    """
    @staticmethod
    def once() -> Frequency:
        r"""
        Perform the action once.
        
        Returns
        -------
        Frequency
            A frequency object representing a single execution.
        """
    @staticmethod
    def every(n_frames:builtins.int) -> Frequency:
        r"""
        Perform the action every N frames.
        
        Parameters
        ----------
        n_frames : int
            Number of frames between each action.
        
        Returns
        -------
        Frequency
            A frequency object representing the repeated execution interval.
        
        Raises
        ------
        ConfigError
            If `n_frames` is 0.
        """

