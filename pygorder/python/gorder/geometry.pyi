# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing

class Cuboid:
    r"""
    Calculate order parameters inside a cuboid.
    
    Parameters
    ----------
    xdim : Optional[List[float]]
        Span of the cuboid along the x-axis [nm]. Defaults to infinite if not specified.
    ydim : Optional[List[float]]
        Span of the cuboid along the y-axis [nm]. Defaults to infinite if not specified.
    zdim : Optional[List[float]]
        Span of the cuboid along the z-axis [nm]. Defaults to infinite if not specified.
    reference : Optional[Union[List[float],str]]
        Reference point for the cuboid position. Defaults to [0.0, 0.0, 0.0].
    
    Raises
    ------
    ConfigError
        If any dimension is invalid.
    """
    def __new__(cls, xdim:typing.Sequence[builtins.float]=[-inf, inf], ydim:typing.Sequence[builtins.float]=[-inf, inf], zdim:typing.Sequence[builtins.float]=[-inf, inf], reference:typing.Optional[typing.Any]=None) -> Cuboid: ...

class Cylinder:
    r"""
    Calculate order parameters inside a cylinder.
    
    Parameters
    ----------
    radius : float
        Radius of the cylinder [nm].
    orientation : str
        Orientation of the cylinder's main axis. Expected values are x, y, or z.
    span : Optional[List[float]]
        Span along the main axis [nm]. Defaults to infinite if not specified.
    reference : Optional[Union[List[float],str]]
        Reference point for position and size. Defaults to [0.0, 0.0, 0.0].
    
    Raises
    ------
    ConfigError
        If `radius` is not positive, `span` is invalid, or `orientation` is not recognized.
    """
    def __new__(cls, radius:builtins.float, orientation:builtins.str, span:typing.Sequence[builtins.float]=[-inf, inf], reference:typing.Optional[typing.Any]=None) -> Cylinder: ...

class Sphere:
    r"""
    Calculate order parameters inside a sphere.
    
    Parameters
    ----------
    radius : float
        Radius of the sphere [nm].
    reference : Optional[Union[List[float],str]]
        Center of the sphere. Defaults to [0.0, 0.0, 0.0].
    
    Raises
    ------
    ConfigError
        If `radius` is not positive.
    """
    def __new__(cls, radius:builtins.float, reference:typing.Optional[typing.Any]=None) -> Sphere: ...

