# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import numpy
import typing
import gorder

class ClusteringClassification:
    r"""
    Assign lipids into leaflets using spectral clustering.
    
    Reliable even for curved membranes but very slow, especially for large systems.
    
    Parameters
    ----------
    heads : str
        Selection query specifying reference atoms representing lipid headgroups
        (typically phosphorus atoms or phosphate beads).
        There must be exactly one such atom/bead per lipid molecule.
    frequency : Optional[Frequency]
        Frequency of classification. Defaults to every frame.
    collect : Optional[Union[bool, str]], default=False
        Determines whether leaflet classification data are saved and exported.
        By default (`False`), data are not saved.
        If `True`, data are saved internally and accessible via the Python API, but not written to a file.
        If a string is provided, data are saved and written to the specified output file.
    """
    def __new__(cls, heads:builtins.str, frequency:typing.Optional[gorder.Frequency]=None, collect:typing.Optional[typing.Union[builtins.bool, builtins.str]]=None) -> ClusteringClassification: ...

class GlobalClassification:
    r"""
    Assign lipids into leaflets based on the global membrane center of geometry.
    
    Generally reliable and fast. The best option for analyzing disrupted membranes.
    
    Parameters
    ----------
    membrane : str
        Selection query specifying all lipids forming the membrane.
    heads : str
        Selection query specifying reference atoms representing lipid headgroups
        (typically phosphorus atoms or phosphate beads).
        There must be exactly one such atom/bead per lipid molecule.
    frequency : Optional[Frequency]
        Frequency of classification. Defaults to every frame.
    membrane_normal : Optional[str]
        Membrane normal used for leaflet classification. Defaults to the membrane normal
        specified for the entire Analysis.
    collect : Optional[Union[bool, str]], default=False
        Determines whether leaflet classification data are saved and exported.
        By default (`False`), data are not saved.
        If `True`, data are saved internally and accessible via the Python API, but not written to a file.
        If a string is provided, data are saved and written to the specified output file.
    """
    def __new__(cls, membrane:builtins.str, heads:builtins.str, frequency:typing.Optional[gorder.Frequency]=None, membrane_normal:typing.Optional[builtins.str]=None, collect:typing.Optional[typing.Union[builtins.bool, builtins.str]]=None) -> GlobalClassification: ...

class IndividualClassification:
    r"""
    Assign lipids into leaflets based on the orientation of acyl chains.
    
    Less reliable but computationally fast.
    
    Parameters
    ----------
    heads : str
        Selection query specifying reference atoms representing lipid headgroups
        (typically phosphorus atoms or phosphate beads).
        There must be exactly one such atom/bead per lipid molecule.
    methyls : str
        Selection query specifying reference atoms representing methyl groups at the ends of lipid tails.
        There should be exactly one such atom/bead per acyl chain (e.g., two for lipids with two acyl chains).
    frequency : Optional[Frequency]
        Frequency of classification. Defaults to every frame.
    membrane_normal : Optional[str]
        Membrane normal used for leaflet classification. Defaults to the membrane normal
        specified for the entire Analysis.
    collect : Optional[Union[bool, str]], default=False
        Determines whether leaflet classification data are saved and exported.
        By default (`False`), data are not saved.
        If `True`, data are saved internally and accessible via the Python API, but not written to a file.
        If a string is provided, data are saved and written to the specified output file.
    """
    def __new__(cls, heads:builtins.str, methyls:builtins.str, frequency:typing.Optional[gorder.Frequency]=None, membrane_normal:typing.Optional[builtins.str]=None, collect:typing.Optional[typing.Union[builtins.bool, builtins.str]]=None) -> IndividualClassification: ...

class LocalClassification:
    r"""
    Assign lipids into leaflets based on the local membrane center of geometry.
    
    Useful for curved membranes but computationally slow.
    
    Parameters
    ----------
    membrane : str
        Selection query specifying all lipids forming the membrane.
    heads : str
        Selection query specifying reference atoms representing lipid headgroups
        (typically phosphorus atoms or phosphate beads).
        There must be exactly one such atom/bead per lipid molecule.
    radius : float
        Radius of a cylinder used to calculate the local membrane center of geometry (in nm).
    frequency : Optional[Frequency]
        Frequency of classification. Defaults to every frame.
    membrane_normal : Optional[str]
        Membrane normal used for leaflet classification. Defaults to the membrane normal
        specified for the entire Analysis.
    collect : Optional[Union[bool, str]], default=False
        Determines whether leaflet classification data are saved and exported.
        By default (`False`), data are not saved.
        If `True`, data are saved internally and accessible via the Python API, but not written to a file.
        If a string is provided, data are saved and written to the specified output file.
    """
    def __new__(cls, membrane:builtins.str, heads:builtins.str, radius:builtins.float, frequency:typing.Optional[gorder.Frequency]=None, membrane_normal:typing.Optional[builtins.str]=None, collect:typing.Optional[typing.Union[builtins.bool, builtins.str]]=None) -> LocalClassification: ...

class ManualClassification:
    r"""
    Get leaflet assignment from an external YAML file or a dictionary.
    
    Parameters
    ----------
    input : Union[str, Mapping[str, ndarray[uint8]]]
        Path to the input YAML file containing the leaflet assignment
        or a dictionary specifying the leaflet assignment.
    frequency : Optional[Frequency]
        Frequency of classification. Defaults to every frame.
    """
    def __new__(cls, input:typing.Union[builtins.str, typing.Mapping[builtins.str, numpy.typing.NDArray[numpy.uint8]]], frequency:typing.Optional[gorder.Frequency]=None) -> ManualClassification: ...

class NdxClassification:
    r"""
    Get leaflet assignment from NDX file(s).
    
    Parameters
    ----------
    ndx : Sequence[str]
        A list of NDX files to read.
    heads : str
        Selection query specifying reference atoms representing lipid headgroups
        (typically phosphorus atoms or phosphate beads).
        There must be exactly one such atom/bead per lipid molecule.
    upper_leaflet : str
        Name of the group in the NDX file(s) specifying the atoms of the upper leaflet.
    lower_leaflet : str
        Name of the group in the NDX file(s) specifying the atoms of the lower leaflet.
    frequency : Optional[Frequency]
        Frequency of classification. Defaults to every frame.
    
    Notes
    -----
    - No glob expansion is performed for the NDX files.
    """
    def __new__(cls, ndx:typing.Sequence[builtins.str], heads:builtins.str, upper_leaflet:builtins.str, lower_leaflet:builtins.str, frequency:typing.Optional[gorder.Frequency]=None) -> NdxClassification: ...

