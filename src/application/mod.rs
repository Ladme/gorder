// Released under MIT License.
// Copyright (c) 2024 Ladislav Bartos

//! This module contains the implementation of the `gorder` binary.

use clap::Parser;
use colored::Colorize;
use gorder::{Analysis, GORDER_VERSION};

#[derive(Parser, Debug)]
#[command(
    author,
    version,
    about,
    long_about = "Calculate order parameters for any atomistic or coarse grained system."
)]
pub struct Args {
    #[arg(
        help = "Config yaml file",
        long_help = "Configuration yaml file specifying the analysis settings."
    )]
    pub config: String,

    #[arg(
        long = "silent",
        action,
        help = "Suppress standard output",
        default_value_t = false,
        long_help = "Suppress all standard output generated by the 'gorder' program, except for error messages.
This option can also be specified in the configuration file."
    )]
    pub silent: bool,

    #[arg(
        long = "overwrite",
        action,
        help = "Overwrite existing files and directories with the same name",
        default_value_t = false,
        long_help = "Overwrite existing files and directories with the same name as the output. No backup copies will be created.
This option can also be specified in the configuration file."
    )]
    pub overwrite: bool,
}

pub(crate) fn run() -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    let args = Args::parse();

    colog::init();

    let mut analysis = match Analysis::from_file(&args.config) {
        Ok(x) => x,
        Err(e) => {
            log::error!("{}", e);
            return Err(Box::new(e));
        }
    };

    let silent = analysis.silent();

    if !silent {
        analysis.set_silent(args.silent);
    }

    if !analysis.overwrite() {
        analysis.set_overwrite(args.overwrite);
    }

    if silent {
        log::set_max_level(log::LevelFilter::Error);
    } else {
        let header = format!(">>> GORDER v{} <<<", GORDER_VERSION).bold();
        println!("\n{}\n", header);
        log::info!("Read config file '{}'.", args.config);
    }

    let result = analysis.run();

    if let Err(ref e) = result {
        log::error!("{}", e);
    }

    if !silent {
        display_result(&result);
    }

    result
}

#[inline(always)]
fn display_result(result: &Result<(), Box<dyn std::error::Error + Send + Sync>>) {
    match result {
        Ok(_) => {
            let prefix = format!(
                "{}{}{}",
                "[".to_string().blue().bold(),
                "✔".to_string().bright_green().bold(),
                "]".to_string().blue().bold()
            );
            let message = "ANALYSIS COMPLETED".to_string().bright_green().bold();
            println!("{} {}\n", prefix, message);
        }
        Err(_) => {
            let prefix = format!(
                "{}{}{}",
                "[".to_string().blue().bold(),
                "✖".to_string().red().bold(),
                "]".to_string().blue().bold()
            );
            let message = "ANALYSIS FAILED".to_string().red().bold();
            println!("{} {}\n", prefix, message);
        }
    }
}
